/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __drake_lcmt_hydroelastic_contact_surface_for_viz_hpp__
#define __drake_lcmt_hydroelastic_contact_surface_for_viz_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "drake/lcmt_hydroelastic_quadrature_per_point_data_for_viz.hpp"
#include "drake/lcmt_point.hpp"

namespace drake
{

class lcmt_hydroelastic_contact_surface_for_viz
{
    public:
        /**
         * The contact is between two bodies, but we track multiple names per body
         * so that visualizers can fully disambiguate contacts:
         *
         * - name of the geometry affixed to the body which produced the surface.
         * - name of the body.
         * - name of the model instance to which the body belongs.
         * - uniqueness of the body name. If unique, the body can unambiguously be
         * represented by just its body name. Otherwise it must be combined with
         * its model instance name. The validity of this logic relies on
         * MultibodyPlant's requirement that model instance names must be unique.
         * - the number of collision geometries affixed to the body. If the
         * colliding bodies both have a single collision geometry each, there can
         * be only one contact surface between them and display can be
         * streamlined. Otherwise, the possibility of multiple contact surfaces
         * needs to be accounted for.
         *
         */
        std::string geometry1_name;

        std::string body1_name;

        std::string model1_name;

        int8_t     body1_unique;

        int32_t    collision_count1;

        std::string geometry2_name;

        std::string body2_name;

        std::string model2_name;

        int8_t     body2_unique;

        int32_t    collision_count2;

        /**
         * The centroid of the contact surface, as an offset vector expressed in the
         * world frame.
         */
        double     centroid_W[3];

        /**
         * The force, expressed in the world frame, that is applied to `body1_name`
         * at the centroid of the contact surface.
         */
        double     force_C_W[3];

        /**
         * The moment, expressed in the world frame, that is applied to `body1_name`
         * at the centroid of the contact surface.
         */
        double     moment_C_W[3];

        /**
         * The *total* number of quadrature points. The number of per-face quadrature
         * points are typically 1 or 3 (in the future, some arbitrary number may be
         * permitted). There is no guaranteed pattern of correspondence between the
         * ith quadrature point and the jth mesh face.
         */
        int32_t    num_quadrature_points;

        /// The quadrature point data.
        std::vector< drake::lcmt_hydroelastic_quadrature_per_point_data_for_viz > quadrature_point_data;

        /// The vertices.
        int32_t    num_vertices;

        /**
         * TODO(SeanCurtis-TRI): It would be nice to have a simple Vector3 type here,
         * but the concept of a 3D point is perfectly sufficient.
         */
        std::vector< drake::lcmt_point > p_WV;

        /// Pressure values at each vertex.
        std::vector< double > pressure;

        /**
         * The polygons are encoded in one long stream as
         * c0, v00, v01, ..., c1, v10, v11, ...
         * Such that each polygon has a count of vertices ci, followed by ci number
         * of 0-indexed indices into the vertex set. The total number of integer
         * values is recorded here.
         */
        int32_t    poly_data_int_count;

        std::vector< int32_t > poly_data;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "lcmt_hydroelastic_contact_surface_for_viz"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int lcmt_hydroelastic_contact_surface_for_viz::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_hydroelastic_contact_surface_for_viz::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int lcmt_hydroelastic_contact_surface_for_viz::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_hydroelastic_contact_surface_for_viz::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* lcmt_hydroelastic_contact_surface_for_viz::getTypeName()
{
    return "lcmt_hydroelastic_contact_surface_for_viz";
}

int lcmt_hydroelastic_contact_surface_for_viz::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    char* geometry1_name_cstr = const_cast<char*>(this->geometry1_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &geometry1_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* body1_name_cstr = const_cast<char*>(this->body1_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &body1_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* model1_name_cstr = const_cast<char*>(this->model1_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &model1_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->body1_unique, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->collision_count1, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* geometry2_name_cstr = const_cast<char*>(this->geometry2_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &geometry2_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* body2_name_cstr = const_cast<char*>(this->body2_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &body2_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* model2_name_cstr = const_cast<char*>(this->model2_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &model2_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->body2_unique, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->collision_count2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->centroid_W[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->force_C_W[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->moment_C_W[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_quadrature_points, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_quadrature_points; a0++) {
        tlen = this->quadrature_point_data[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_vertices, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_vertices; a0++) {
        tlen = this->p_WV[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_vertices > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->pressure[0], this->num_vertices);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->poly_data_int_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->poly_data_int_count > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->poly_data[0], this->poly_data_int_count);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int lcmt_hydroelastic_contact_surface_for_viz::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    int32_t __geometry1_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__geometry1_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__geometry1_name_len__ > maxlen - pos) return -1;
    this->geometry1_name.assign(
        static_cast<const char*>(buf) + offset + pos, __geometry1_name_len__ - 1);
    pos += __geometry1_name_len__;

    int32_t __body1_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__body1_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__body1_name_len__ > maxlen - pos) return -1;
    this->body1_name.assign(
        static_cast<const char*>(buf) + offset + pos, __body1_name_len__ - 1);
    pos += __body1_name_len__;

    int32_t __model1_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__model1_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__model1_name_len__ > maxlen - pos) return -1;
    this->model1_name.assign(
        static_cast<const char*>(buf) + offset + pos, __model1_name_len__ - 1);
    pos += __model1_name_len__;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->body1_unique, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->collision_count1, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __geometry2_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__geometry2_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__geometry2_name_len__ > maxlen - pos) return -1;
    this->geometry2_name.assign(
        static_cast<const char*>(buf) + offset + pos, __geometry2_name_len__ - 1);
    pos += __geometry2_name_len__;

    int32_t __body2_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__body2_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__body2_name_len__ > maxlen - pos) return -1;
    this->body2_name.assign(
        static_cast<const char*>(buf) + offset + pos, __body2_name_len__ - 1);
    pos += __body2_name_len__;

    int32_t __model2_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__model2_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__model2_name_len__ > maxlen - pos) return -1;
    this->model2_name.assign(
        static_cast<const char*>(buf) + offset + pos, __model2_name_len__ - 1);
    pos += __model2_name_len__;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->body2_unique, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->collision_count2, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->centroid_W[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->force_C_W[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->moment_C_W[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_quadrature_points, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->quadrature_point_data.resize(this->num_quadrature_points);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_quadrature_points; a0++) {
        tlen = this->quadrature_point_data[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_vertices, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->p_WV.resize(this->num_vertices);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_vertices; a0++) {
        tlen = this->p_WV[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_vertices) {
        this->pressure.resize(this->num_vertices);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->pressure[0], this->num_vertices);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->poly_data_int_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->poly_data_int_count) {
        this->poly_data.resize(this->poly_data_int_count);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->poly_data[0], this->poly_data_int_count);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int lcmt_hydroelastic_contact_surface_for_viz::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->geometry1_name.size() + 4 + 1;
    enc_size += this->body1_name.size() + 4 + 1;
    enc_size += this->model1_name.size() + 4 + 1;
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->geometry2_name.size() + 4 + 1;
    enc_size += this->body2_name.size() + 4 + 1;
    enc_size += this->model2_name.size() + 4 + 1;
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_quadrature_points; a0++) {
        enc_size += this->quadrature_point_data[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_vertices; a0++) {
        enc_size += this->p_WV[a0]._getEncodedSizeNoHash();
    }
    enc_size += __double_encoded_array_size(NULL, this->num_vertices);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, this->poly_data_int_count);
    return enc_size;
}

uint64_t lcmt_hydroelastic_contact_surface_for_viz::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == lcmt_hydroelastic_contact_surface_for_viz::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, lcmt_hydroelastic_contact_surface_for_viz::getHash };

    uint64_t hash = 0x4efd7d8f630a0b66LL +
         drake::lcmt_hydroelastic_quadrature_per_point_data_for_viz::_computeHash(&cp) +
         drake::lcmt_point::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
