/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __drake_lcmt_point_cloud_field_hpp__
#define __drake_lcmt_point_cloud_field_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>

namespace drake {

/**
 * Describes one field (i.e., channel) within an lcmt_point_cloud.
 *
 * Modeled after PCL and ROS conventions:
 * https://pointclouds.org/documentation/structpcl_1_1_p_c_l_point_field.html
 * https://docs.ros.org/en/api/sensor_msgs/html/msg/PointField.html
 * http://wiki.ros.org/pcl/Overview#Common_PointCloud2_field_names
 *
 */
class lcmt_point_cloud_field {
public:
    /// Field name.
    std::string name;

    /// Location of this field after the start of each point's data.
    int32_t byte_offset;

    /// Element type, per the constants shown below.
    int8_t datatype;

    /// Number of elements per field.
    int32_t count;

public:
    /// Allowed values for datatype.
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t INT8 = 1;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t UINT8 = 2;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t INT16 = 3;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t UINT16 = 4;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t INT32 = 5;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t UINT32 = 6;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t FLOAT32 = 7;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t FLOAT64 = 8;

public:
    /**
     * Encode a message into binary form.
     *
     * @param buf The output buffer.
     * @param offset Encoding starts at thie byte offset into @p buf.
     * @param maxlen Maximum number of bytes to write.  This should generally be
     *  equal to getEncodedSize().
     * @return The number of bytes encoded, or <0 on error.
     */
    inline int encode(void* buf, int offset, int maxlen) const;

    /**
     * Check how many bytes are required to encode this message.
     */
    inline int getEncodedSize() const;

    /**
     * Decode a message from binary form into this instance.
     *
     * @param buf The buffer containing the encoded message.
     * @param offset The byte offset into @p buf where the encoded message starts.
     * @param maxlen The maximum number of bytes to read while decoding.
     * @return The number of bytes decoded, or <0 if an error occured.
     */
    inline int decode(const void* buf, int offset, int maxlen);

    /**
     * Retrieve the 64-bit fingerprint identifying the structure of the message.
     * Note that the fingerprint is the same for all instances of the same
     * message type, and is a fingerprint on the message type definition, not on
     * the message contents.
     */
    inline static int64_t getHash();

    /**
     * Returns "lcmt_point_cloud_field"
     */
    inline static const char* getTypeName();

    // LCM support functions. Users should not call these
    inline int _encodeNoHash(void* buf, int offset, int maxlen) const;
    inline int _getEncodedSizeNoHash() const;
    inline int _decodeNoHash(const void* buf, int offset, int maxlen);
    inline static uint64_t _computeHash(const __lcm_hash_ptr* p);
};

int lcmt_point_cloud_field::encode(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int lcmt_point_cloud_field::decode(const void* buf, int offset, int maxlen) {
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;

    return pos;
}

int lcmt_point_cloud_field::getEncodedSize() const {
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_point_cloud_field::getHash() {
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* lcmt_point_cloud_field::getTypeName() {
    return "lcmt_point_cloud_field";
}

int lcmt_point_cloud_field::_encodeNoHash(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;

    char* name_cstr = const_cast<char*>(this->name.c_str());
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &name_cstr, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->byte_offset, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->datatype, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->count, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int lcmt_point_cloud_field::_decodeNoHash(const void* buf, int offset, int maxlen) {
    int pos = 0, tlen;

    int32_t __name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__name_len__, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;
    if (__name_len__ > maxlen - pos) return -1;
    this->name.assign(static_cast<const char*>(buf) + offset + pos, __name_len__ - 1);
    pos += __name_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->byte_offset, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->datatype, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->count, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int lcmt_point_cloud_field::_getEncodedSizeNoHash() const {
    int enc_size = 0;
    enc_size += this->name.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t lcmt_point_cloud_field::_computeHash(const __lcm_hash_ptr*) {
    uint64_t hash = 0xe93146ac7d998d9fLL;
    return (hash << 1) + ((hash >> 63) & 1);
}

}  // namespace drake

#endif
