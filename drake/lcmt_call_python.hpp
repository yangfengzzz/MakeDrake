/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __drake_lcmt_call_python_hpp__
#define __drake_lcmt_call_python_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "lcmt_call_python_data.hpp"

namespace drake {

/**
 * Message to support asynchronous remote procedure calls to a Python
 * client. For historical reasons, interface is modeled on mexCallMATLAB
 * (see https://www.mathworks.com/help/matlab/apiref/mexcallmatlab.html) but
 * with output arguments assigned in the remote client workspace due to the
 * asynchronous nature of the protocol.
 */
class lcmt_call_python {
public:
    /// Any expression that resolves to a callable Python object.
    std::string function_name;

    /// Unique id for variable held in the client workspace.
    int64_t lhs;

    /// Input argument data.
    int32_t num_rhs;

    std::vector<drake::lcmt_call_python_data> rhs;

public:
    /**
     * Encode a message into binary form.
     *
     * @param buf The output buffer.
     * @param offset Encoding starts at thie byte offset into @p buf.
     * @param maxlen Maximum number of bytes to write.  This should generally be
     *  equal to getEncodedSize().
     * @return The number of bytes encoded, or <0 on error.
     */
    inline int encode(void* buf, int offset, int maxlen) const;

    /**
     * Check how many bytes are required to encode this message.
     */
    inline int getEncodedSize() const;

    /**
     * Decode a message from binary form into this instance.
     *
     * @param buf The buffer containing the encoded message.
     * @param offset The byte offset into @p buf where the encoded message starts.
     * @param maxlen The maximum number of bytes to read while decoding.
     * @return The number of bytes decoded, or <0 if an error occured.
     */
    inline int decode(const void* buf, int offset, int maxlen);

    /**
     * Retrieve the 64-bit fingerprint identifying the structure of the message.
     * Note that the fingerprint is the same for all instances of the same
     * message type, and is a fingerprint on the message type definition, not on
     * the message contents.
     */
    inline static int64_t getHash();

    /**
     * Returns "lcmt_call_python"
     */
    inline static const char* getTypeName();

    // LCM support functions. Users should not call these
    inline int _encodeNoHash(void* buf, int offset, int maxlen) const;
    inline int _getEncodedSizeNoHash() const;
    inline int _decodeNoHash(const void* buf, int offset, int maxlen);
    inline static uint64_t _computeHash(const __lcm_hash_ptr* p);
};

int lcmt_call_python::encode(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int lcmt_call_python::decode(const void* buf, int offset, int maxlen) {
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;

    return pos;
}

int lcmt_call_python::getEncodedSize() const {
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_call_python::getHash() {
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* lcmt_call_python::getTypeName() {
    return "lcmt_call_python";
}

int lcmt_call_python::_encodeNoHash(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;

    char* function_name_cstr = const_cast<char*>(this->function_name.c_str());
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &function_name_cstr, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->lhs, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_rhs, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    for (int a0 = 0; a0 < this->num_rhs; a0++) {
        tlen = this->rhs[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    return pos;
}

int lcmt_call_python::_decodeNoHash(const void* buf, int offset, int maxlen) {
    int pos = 0, tlen;

    int32_t __function_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__function_name_len__, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;
    if (__function_name_len__ > maxlen - pos) return -1;
    this->function_name.assign(static_cast<const char*>(buf) + offset + pos, __function_name_len__ - 1);
    pos += __function_name_len__;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->lhs, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_rhs, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    try {
        this->rhs.resize(this->num_rhs);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_rhs; a0++) {
        tlen = this->rhs[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    return pos;
}

int lcmt_call_python::_getEncodedSizeNoHash() const {
    int enc_size = 0;
    enc_size += this->function_name.size() + 4 + 1;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_rhs; a0++) {
        enc_size += this->rhs[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t lcmt_call_python::_computeHash(const __lcm_hash_ptr* p) {
    const __lcm_hash_ptr* fp;
    for (fp = p; fp != NULL; fp = fp->parent)
        if (fp->v == lcmt_call_python::getHash) return 0;
    const __lcm_hash_ptr cp = {p, lcmt_call_python::getHash};

    uint64_t hash = 0x30b0ddcf5c354914LL + drake::lcmt_call_python_data::_computeHash(&cp);

    return (hash << 1) + ((hash >> 63) & 1);
}

}  // namespace drake

#endif
