/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __drake_lcmt_panda_status_hpp__
#define __drake_lcmt_panda_status_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>

namespace drake {

/**
 * The current status of a Franka Panda arm.  All angular
 * positions/velocities are expressed in radians and radians/second.
 *
 * The fields of this message are based on the franka::RobotState message
 * found in libfranka, see
 * https://frankaemika.github.io/libfranka/structfranka_1_1RobotState.html
 * Where the names of some fields have been changed to be more "drake-like",
 * the original field name is referenced here.
 */
class lcmt_panda_status {
public:
    /// The timestamp in microseconds.
    int64_t utime;

    int32_t num_joints;

    /// franka::RobotState.q
    std::vector<double> joint_position;

    /// franka::RobotState.q_d
    std::vector<double> joint_position_desired;

    /// franka::RobotState.dq
    std::vector<double> joint_velocity;

    /// franka::RobotState.dq_d
    std::vector<double> joint_velocity_desired;

    /// franka::RobotState.ddq_d
    std::vector<double> joint_acceleration_desired;

    /// franka::RobotState.tau_J
    std::vector<double> joint_torque;

    /// franka::RobotState.tau_J_d
    std::vector<double> joint_torque_desired;

    /// franka::RobotState.tau_ext_hat_filtered
    std::vector<double> joint_torque_external;

    double control_command_success_rate;

    int8_t robot_mode;

    /// franka::RobotState.time.toMSec() * 1000
    int64_t robot_utime;

    /// Mask of enabled control modes
    int8_t control_mode;

public:
    /// enum for robot mode
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t kOther = 0;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t kIdle = 1;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t kMove = 2;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t kGuiding = 3;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t kReflex = 4;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t kUserStopped = 5;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t kAutomaticErrorRecovery = 6;
    /**
     * Information about how the driver's control mode is configured, as
     * described in
     * https://frankaemika.github.io/docs/libfranka.html#realtime-commands and
     * https://frankaemika.github.io/libfranka/classfranka_1_1Robot.html
     *
     * For a driver based on libfranka, at most one of position or velocity
     * control would be enabled at any given time.  In other circumstances
     * (e.g. simulation) both position and velocity commands may potentially be
     * used.
     */
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t CONTROL_MODE_POSITION = 1;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t CONTROL_MODE_VELOCITY = 2;
    // If you're using C++11 and are getting compiler errors saying
    // things like ‘constexpr’ needed for in-class initialization of
    // static data member then re-run lcm-gen with '--cpp-std=c++11'
    // to generate code that is compliant with C++11
    static const int8_t CONTROL_MODE_TORQUE = 4;

public:
    /**
     * Encode a message into binary form.
     *
     * @param buf The output buffer.
     * @param offset Encoding starts at thie byte offset into @p buf.
     * @param maxlen Maximum number of bytes to write.  This should generally be
     *  equal to getEncodedSize().
     * @return The number of bytes encoded, or <0 on error.
     */
    inline int encode(void* buf, int offset, int maxlen) const;

    /**
     * Check how many bytes are required to encode this message.
     */
    inline int getEncodedSize() const;

    /**
     * Decode a message from binary form into this instance.
     *
     * @param buf The buffer containing the encoded message.
     * @param offset The byte offset into @p buf where the encoded message starts.
     * @param maxlen The maximum number of bytes to read while decoding.
     * @return The number of bytes decoded, or <0 if an error occured.
     */
    inline int decode(const void* buf, int offset, int maxlen);

    /**
     * Retrieve the 64-bit fingerprint identifying the structure of the message.
     * Note that the fingerprint is the same for all instances of the same
     * message type, and is a fingerprint on the message type definition, not on
     * the message contents.
     */
    inline static int64_t getHash();

    /**
     * Returns "lcmt_panda_status"
     */
    inline static const char* getTypeName();

    // LCM support functions. Users should not call these
    inline int _encodeNoHash(void* buf, int offset, int maxlen) const;
    inline int _getEncodedSizeNoHash() const;
    inline int _decodeNoHash(const void* buf, int offset, int maxlen);
    inline static uint64_t _computeHash(const __lcm_hash_ptr* p);
};

int lcmt_panda_status::encode(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int lcmt_panda_status::decode(const void* buf, int offset, int maxlen) {
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;

    return pos;
}

int lcmt_panda_status::getEncodedSize() const {
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_panda_status::getHash() {
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* lcmt_panda_status::getTypeName() {
    return "lcmt_panda_status";
}

int lcmt_panda_status::_encodeNoHash(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_joints, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_position[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_position_desired[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_velocity[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_velocity_desired[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_acceleration_desired[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_torque[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_torque_desired[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->joint_torque_external[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->control_command_success_rate, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->robot_mode, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->robot_utime, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->control_mode, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int lcmt_panda_status::_decodeNoHash(const void* buf, int offset, int maxlen) {
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_joints, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    if (this->num_joints) {
        this->joint_position.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_position[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints) {
        this->joint_position_desired.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_position_desired[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints) {
        this->joint_velocity.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_velocity[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints) {
        this->joint_velocity_desired.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_velocity_desired[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints) {
        this->joint_acceleration_desired.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_acceleration_desired[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints) {
        this->joint_torque.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_torque[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints) {
        this->joint_torque_desired.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_torque_desired[0], this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    if (this->num_joints) {
        this->joint_torque_external.resize(this->num_joints);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->joint_torque_external[0],
                                     this->num_joints);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->control_command_success_rate, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->robot_mode, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->robot_utime, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->control_mode, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int lcmt_panda_status::_getEncodedSizeNoHash() const {
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, this->num_joints);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t lcmt_panda_status::_computeHash(const __lcm_hash_ptr*) {
    uint64_t hash = 0x0cab8e6fa6c17d73LL;
    return (hash << 1) + ((hash >> 63) & 1);
}

}  // namespace drake

#endif
