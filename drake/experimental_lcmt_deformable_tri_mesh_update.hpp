/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __drake_experimental_lcmt_deformable_tri_mesh_update_hpp__
#define __drake_experimental_lcmt_deformable_tri_mesh_update_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>

namespace drake {

/**
 * An update to the vertex positions of the mesh named `name`.
 * * `num_vertices` is the number of vertex positions to be passed in this
 * message.
 * * `vertices_W[i]` contains the world space position of the i-th vertex
 * passed in this message.
 */
class experimental_lcmt_deformable_tri_mesh_update {
public:
    std::string name;

    int32_t num_vertices;

    std::vector<std::vector<double>> vertices_W;

public:
    /**
     * Encode a message into binary form.
     *
     * @param buf The output buffer.
     * @param offset Encoding starts at thie byte offset into @p buf.
     * @param maxlen Maximum number of bytes to write.  This should generally be
     *  equal to getEncodedSize().
     * @return The number of bytes encoded, or <0 on error.
     */
    inline int encode(void* buf, int offset, int maxlen) const;

    /**
     * Check how many bytes are required to encode this message.
     */
    inline int getEncodedSize() const;

    /**
     * Decode a message from binary form into this instance.
     *
     * @param buf The buffer containing the encoded message.
     * @param offset The byte offset into @p buf where the encoded message starts.
     * @param maxlen The maximum number of bytes to read while decoding.
     * @return The number of bytes decoded, or <0 if an error occured.
     */
    inline int decode(const void* buf, int offset, int maxlen);

    /**
     * Retrieve the 64-bit fingerprint identifying the structure of the message.
     * Note that the fingerprint is the same for all instances of the same
     * message type, and is a fingerprint on the message type definition, not on
     * the message contents.
     */
    inline static int64_t getHash();

    /**
     * Returns "experimental_lcmt_deformable_tri_mesh_update"
     */
    inline static const char* getTypeName();

    // LCM support functions. Users should not call these
    inline int _encodeNoHash(void* buf, int offset, int maxlen) const;
    inline int _getEncodedSizeNoHash() const;
    inline int _decodeNoHash(const void* buf, int offset, int maxlen);
    inline static uint64_t _computeHash(const __lcm_hash_ptr* p);
};

int experimental_lcmt_deformable_tri_mesh_update::encode(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int experimental_lcmt_deformable_tri_mesh_update::decode(const void* buf, int offset, int maxlen) {
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;

    return pos;
}

int experimental_lcmt_deformable_tri_mesh_update::getEncodedSize() const {
    return 8 + _getEncodedSizeNoHash();
}

int64_t experimental_lcmt_deformable_tri_mesh_update::getHash() {
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* experimental_lcmt_deformable_tri_mesh_update::getTypeName() {
    return "experimental_lcmt_deformable_tri_mesh_update";
}

int experimental_lcmt_deformable_tri_mesh_update::_encodeNoHash(void* buf, int offset, int maxlen) const {
    int pos = 0, tlen;

    char* name_cstr = const_cast<char*>(this->name.c_str());
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &name_cstr, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_vertices, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    for (int a0 = 0; a0 < this->num_vertices; a0++) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->vertices_W[a0][0], 3);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    return pos;
}

int experimental_lcmt_deformable_tri_mesh_update::_decodeNoHash(const void* buf, int offset, int maxlen) {
    int pos = 0, tlen;

    int32_t __name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__name_len__, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;
    if (__name_len__ > maxlen - pos) return -1;
    this->name.assign(static_cast<const char*>(buf) + offset + pos, __name_len__ - 1);
    pos += __name_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_vertices, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    try {
        this->vertices_W.resize(this->num_vertices);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_vertices; a0++) {
        if (3) {
            this->vertices_W[a0].resize(3);
            tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->vertices_W[a0][0], 3);
            if (tlen < 0)
                return tlen;
            else
                pos += tlen;
        }
    }

    return pos;
}

int experimental_lcmt_deformable_tri_mesh_update::_getEncodedSizeNoHash() const {
    int enc_size = 0;
    enc_size += this->name.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->num_vertices * __double_encoded_array_size(NULL, 3);
    return enc_size;
}

uint64_t experimental_lcmt_deformable_tri_mesh_update::_computeHash(const __lcm_hash_ptr*) {
    uint64_t hash = 0xd312a58a7220ef24LL;
    return (hash << 1) + ((hash >> 63) & 1);
}

}  // namespace drake

#endif
