/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __drake_lcmt_point_cloud_hpp__
#define __drake_lcmt_point_cloud_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "drake/lcmt_point_cloud_field.hpp"

namespace drake
{

/**
 * Generic point cloud with runtime typing.
 *
 * Modeled after PCL and ROS conventions:
 * https://pointclouds.org/documentation/structpcl_1_1_p_c_l_point_cloud2.html
 * https://docs.ros.org/en/api/sensor_msgs/html/msg/PointCloud2.html
 *
 */
class lcmt_point_cloud
{
    public:
        /// Timestamp in microseconds.
        int64_t    utime;

        /// The name of a frame this data is associated with.
        std::string frame_name;

        /**
         * If the cloud is structured, this is the 2D width.
         * If the cloud is unstructured, this is the number of points in the cloud.
         */
        int64_t    width;

        /**
         * If the cloud is structured, this is the 2D height.
         * If the cloud is unstructured, this is set to 1.
         */
        int64_t    height;

        /// Descriptions of the fields.
        int32_t    num_fields;

        std::vector< drake::lcmt_point_cloud_field > fields;

        /// Bitfield of flags describing this.  See the "IS_..." constants below.
        int64_t    flags;

        /**
         * Number of bytes between each successive point.  This is always at least the
         * sum of all field sizes, but may be larger if the data has internal padding.
         */
        int32_t    point_step;

        /// Number of bytes between each successive row.
        int64_t    row_step;

        /// Optional filler bytes to allow the raw point data to be aligned in memory.
        int16_t    filler_size;

        std::vector< uint8_t > filler;

        /// The raw point data.
        int64_t    data_size;

        std::vector< uint8_t > data;

    public:
        /**
         * === Constants for the flags bits ===
         * Set iff data is big-endian.
         */
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int64_t  IS_BIGENDIAN = 1LL;
        /**
         * Set iff data contains only finite values.  (ROS sometimes uses "is_dense"
         * to refer to this concept, but not all implementations agree on whether
         * "dense" means "strictly finite" or "provides full width x height matrix
         * with possibly infinite values", so we use a less ambiguous term here.)
         */
        // If you're using C++11 and are getting compiler errors saying
        // things like ‘constexpr’ needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int64_t  IS_STRICTLY_FINITE = 2LL;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "lcmt_point_cloud"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int lcmt_point_cloud::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_point_cloud::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int lcmt_point_cloud::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_point_cloud::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* lcmt_point_cloud::getTypeName()
{
    return "lcmt_point_cloud";
}

int lcmt_point_cloud::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* frame_name_cstr = const_cast<char*>(this->frame_name.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &frame_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_fields, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_fields; a0++) {
        tlen = this->fields[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->flags, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->point_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->row_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->filler_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->filler_size > 0) {
        tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->filler[0], this->filler_size);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->data_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->data_size > 0) {
        tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->data[0], this->data_size);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int lcmt_point_cloud::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __frame_name_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__frame_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__frame_name_len__ > maxlen - pos) return -1;
    this->frame_name.assign(
        static_cast<const char*>(buf) + offset + pos, __frame_name_len__ - 1);
    pos += __frame_name_len__;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_fields, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->fields.resize(this->num_fields);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num_fields; a0++) {
        tlen = this->fields[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->flags, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->point_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->row_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->filler_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->filler_size) {
        this->filler.resize(this->filler_size);
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->filler[0], this->filler_size);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->data_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->data_size) {
        this->data.resize(this->data_size);
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->data[0], this->data_size);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int lcmt_point_cloud::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += this->frame_name.size() + 4 + 1;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_fields; a0++) {
        enc_size += this->fields[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, this->filler_size);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, this->data_size);
    return enc_size;
}

uint64_t lcmt_point_cloud::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == lcmt_point_cloud::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, lcmt_point_cloud::getHash };

    uint64_t hash = 0xb996d33b5fb6120bLL +
         drake::lcmt_point_cloud_field::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
